(in-package #:ctype.ext.tfun)

;;; This is dangerous, since the result of CONS can be subsequently mutated
;;; into having some other type.
#+(or)
(progn
;;; generic so that e.g. (cons foo (list-of foo)) could be (list-of foo)
(defgeneric tcons (car cdr))
(defmethod tcons ((car ctype) (cdr ctype)) (ccons car cdr))

(define-tfun cons (car cdr) (single-value (tcons car cdr)))
)

(defgeneric tcar (list))
(defdefaults tcar (x))
;; negation is not preserved: (car (the (cons null) x)) is null,
;; but (car (the (not (cons null))) x) is T since null <: (not cons)
(defmethod tcar ((list cmember))
  (let* ((members (cmember-members list))
         (ccars (loop for mem in members
                      when (consp mem)
                        collect (car mem))))
    (if (member nil members)
        (apply #'cmember nil ccars)
        (apply #'cmember ccars))))
(defmethod tcar ((list ccons)) (ccons-car list))

(defgeneric tcdr (list))
(defdefaults tcdr (x))
(defmethod tcdr ((list cmember))
  (let* ((members (cmember-members list))
         (ccdrs (loop for mem in members
                      when (consp mem)
                        collect (cdr mem))))
    (if (member nil members)
        (apply #'cmember nil ccdrs)
        (apply #'cmember ccdrs))))
(defmethod tcdr ((list ccons)) (ccons-cdr list))

(macrolet ((defcr (name &rest ops)
             (labels ((rec (ops)
                        (if ops
                            `(,(first ops) ,(rec (rest ops)))
                            'x)))
               `(define-tfun ,name (c x)
                  (single-value ,(rec ops))))))
  (defcr car tcar)
  (defcr cdr tcdr)

  (defcr caar   tcar tcar)
  (defcr cadr   tcar tcdr)
  (defcr cdar   tcdr tcar)
  (defcr cddr   tcdr tcdr)
  (defcr caaar  tcar tcar tcar)
  (defcr caadr  tcar tcar tcdr)
  (defcr cadar  tcar tcdr tcar)
  (defcr caddr  tcar tcdr tcdr)
  (defcr cdaar  tcdr tcar tcar)
  (defcr cdadr  tcdr tcar tcdr)
  (defcr cddar  tcdr tcdr tcar)
  (defcr cdddr  tcdr tcdr tcdr)
  (defcr caaaar tcar tcar tcar tcar)
  (defcr caaadr tcar tcar tcar tcdr)
  (defcr caadar tcar tcar tcdr tcar)
  (defcr caaddr tcar tcar tcdr tcdr)
  (defcr cadaar tcar tcdr tcar tcar)
  (defcr cadadr tcar tcdr tcar tcdr)
  (defcr caddar tcar tcdr tcdr tcar)
  (defcr cadddr tcar tcdr tcdr tcdr)
  (defcr cdaaar tcdr tcar tcar tcar)
  (defcr cdaadr tcdr tcar tcar tcdr)
  (defcr cdadar tcdr tcar tcdr tcar)
  (defcr cdaddr tcdr tcar tcdr tcdr)
  (defcr cddaar tcdr tcdr tcar tcar)
  (defcr cddadr tcdr tcdr tcar tcdr)
  (defcr cdddar tcdr tcdr tcdr tcar)
  (defcr cddddr tcdr tcdr tcdr tcdr)

  (defcr rest    tcdr)
  (defcr first   tcar)
  (defcr second  tcar tcdr)
  (defcr third   tcar tcdr tcdr)
  (defcr fourth  tcar tcdr tcdr tcdr)
  (defcr fifth   tcar tcdr tcdr tcdr tcdr)
  (defcr sixth   tcar tcdr tcdr tcdr tcdr tcdr)
  (defcr seventh tcar tcdr tcdr tcdr tcdr tcdr tcdr)
  (defcr eighth  tcar tcdr tcdr tcdr tcdr tcdr tcdr tcdr)
  (defcr ninth   tcar tcdr tcdr tcdr tcdr tcdr tcdr tcdr tcdr)
  (defcr tenth   tcar tcdr tcdr tcdr tcdr tcdr tcdr tcdr tcdr tcdr))
